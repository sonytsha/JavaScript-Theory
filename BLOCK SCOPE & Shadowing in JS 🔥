let and const are block scoped
{
}
this is a block 
also known as compound statement
multiple JS code into together

block is basically used where mutliple JS lines are put where JS epects just 1 line

block scope : what all variable/function we can access inside this block

{
var a =10;
let b=20;
const c = 30;
}

b and c are hoisted inside a diff memory space which is reserved , this is block scoped. 
u cant access b and c outside this block hence block scoped.

but a is in global scope, not block scoped




{
var a =10;
let b=20;
const c = 30;
console.log(a);
console.log(b);
console.log(c);
}

console.log(a);
console.log(b);
console.log(c);

output : 10
20
30
10
error

shadowing : 

var a =100;
{
var a =10;
let b = 20;
const c =30;
console.log(a);
console.log(b);
console.log(c);
}
console.log(a);

output : 10
20
30
10
a was shodowed and changed. a gets modified in var


let b =100;
{
var a =10;
let b = 20;
const c =30;
console.log(a);
console.log(b);
console.log(c);
}
console.log(b);

output : 10
20
30
100

let b =100 diff script space
and the next b insiee block scope , provides b =20 only inside block


const c =100;
{
var a =10;
let b = 20;
const c =30;
console.log(a);
console.log(b);
console.log(c);
}
console.log(c);

output : 10
20
30
100

for const also its same,. shadowning

ILLEGAL SHADOWNING :

this is invalid :
let  a =20;
{
 var a =20;
}

this is valid :
var  a =20;
{
 let a =20;
}

if its shadowing it should not cross boundaries, if var put inside and var is global, hence error

this is valid :
let  a =20;
{
 let a =20;
}

this is valid : lexical scope : 

const a =20;
{
const a =100;
{
const a =300;
console.log(a);
}
}
}
outpuit : 300


ARROW FUNCTION : 





